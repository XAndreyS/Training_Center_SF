#13.2. Практические примеры с различными операторами
#Проверка вхождения элемента в последовательность
#Задача. Дано целое число 123456789. Определите, входит ли в него цифра 5.
#
#Решение. Нам дано число, в котором мы заранее не знаем количество цифр, но знаем, что оно целое. Наша задача —
# получить последовательность цифр данного числа и проверить, содержится ли в нем цифра 5.
#
#Применим такую хитрость, что сначала мы переведем число в строку, а потом в список, и посмотрим, что будет
# в итоге:
#
print(list(str(123456789)))
# ['1', '2', '3', '4', '5', '6', '7', '8', '9']

#Мы с вами получили последовательность цифр числа в виде списка, потому что если строку перевести в список, то она
# разбивается на отдельные символы. Теперь нужно перевести каждый элемент списка обратно в число. Для этого есть map:
print(list(map(int, ['1', '2', '3', '4', '5', '6', '7', '8', '9'])))
# [1, 2, 3, 4, 5, 6, 7, 8, 9]

#Теперь, когда мы получили список всех цифр, можно проверить, содержится ли среди них цифра 5:
list_digit = list(map(int, list(str(123456789))))
print(5 in list_digit)
# True

#Но на самом деле эту задачу можно было решить намного проще:
print('5' in str(123456789))
# True

#Задание 13.2.1
#Напишите выражение (задание на самопроверку).
#Дано n-значное целое число N. Определите, входят ли в него цифры 3 и 7.
#Возможное решение

'3' in str(N) and '7' in str(N)

#Проверка эквивалентности
a = [1, 2, 3]
print(id(a))  # id возвращает идентификатор объекта
# 140039772293512

b = a
print(id(b))
# 140039772293512

print(a is b)  # а и b являются один и тем же объектом
# True

#Эквивалентные объекты всегда равны. Но равные объекты не всегда эквивалентны:
a = [1, 2, 3]
b = [1, 2, 3]

print(a == b)  # True
print(a is b)  # False

# Хорошо
a is None

# Плохо
a == None


