#13.3. Условный оператор
#Простой условный оператор
#На языке Python условный оператор записывается следующим образом:
if Условие:
    Блок инструкций 1
else:
    Блок инструкций 2
#
is_rainy = True  # дождь будет

if is_rainy:
    print("Брать зонт")
else:
    print("Не брать зонт")

# условный оператор без блока else
if Условие:
    Блок инструкций 1

#Задание 13.3.2 Скажите, что будет выведено на экран в результате выполнения данного куска кода?
s = 5
a = 10
if a > 0:
   s = s + a
else:
   s = s - a

print(s)
#15

#Допишем программу из прошлого задания таким образом, чтобы она печатала строку «
#адеть дождевик» в том случае, если дождь будет несильный.
is_rainy = True  # дождь будет
heavy_rain = False  # не сильный дождь

if is_rainy:
    # в данный блок дописали ещё один условный оператор
    if heavy_rain:
        print("Брать зонт")
    else:
        print("Надеть дождевик")
else:
    print("Не брать зонт")

#Неявное приведение к булеву типу
print(bool(0))  # False
print(bool(1))  # True

print(bool("")) # False
print(bool("1"))  # True

print(bool([])) # False
print(bool([1]))  # True

#Рассмотрим парочку примеров. Если ваша задача проверить, можно ли делить, и
# является ли делитель нулём, то проверку в явном виде zero != 0 делать излишне.
# Плохо
if zero != 0:
   print(10 / zero)
else:
   print("Делить на ноль нельзя")

# Хорошо
if zero:
   print(10 / zero)
else:
   print("Делить на ноль нельзя")

#Если вам нужно проверить, пустая строка или нет, то сравнивать её способом password == "",
# а уж тем более способом len(password) == 0 ни к чему.
# Плохо
if password == "":
   print("Вы забыли ввести пароль")
else:
   ...

# Очень плохо
if len(password) == 0:
   print("Вы забыли ввести пароль")
else:
   ...

# Хорошо
if not password:
   print("Вы забыли ввести пароль")
else:
   ...